from datetime import datetime
from typing import Literal

from aiogram import html

from src.database.models import PromoCode, ReferralLink
from src.misc import WithdrawMethod, DepositMethod
from src.utils.text_utils import format_float_to_rub_string


class AdminMessages:

    @staticmethod
    def get_deposit_request(
            transaction_type: Literal['deposit', 'withdraw'],
            user_id: int,
            amount: float,
            user_name: str = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            user_requisites: str = None,
            method: DepositMethod | WithdrawMethod = None
    ):

        if transaction_type == 'deposit':
            transaction_str = f'‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ‚ûï'
        else:
            transaction_str = f'‚ûñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ ‚ûñ'
        user_requisites_str = f'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: \n<code>{user_requisites}</code> \n' if user_requisites else ''

        return f'{html.bold(transaction_str)} \n\n' \
               f'üë§ {html.link(f"{user_name}", f"tg://user?id={user_id}")} \n' \
               f'üÜî {html.code(user_id)} \n\n' \
               f'üìÜ {html.italic(datetime.strftime(datetime.now(), "%d/%m/%Y %H:%M"))} \n' \
               f'üè¶ –ú–µ—Ç–æ–¥: {method.value} \n' \
               f'{user_requisites_str}' \
               f'üíµ –°—É–º–º–∞: {format_float_to_rub_string(amount)}'

    @staticmethod
    def get_bonus_description(bonus: PromoCode) -> str:
        text = (
            f'üéÅ –ë–æ–Ω—É—Å\n\n'
            f'–°—É–º–º–∞: {format_float_to_rub_string(bonus.amount)} \n'
            f'–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <code>{bonus.activation_code}</code> \n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {bonus.total_activations_count} \n'
            f'–û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {bonus.remaining_activations_count} \n'
            f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞–∑: {bonus.total_activations_count - bonus.remaining_activations_count} \n'
        )
        return text

    @staticmethod
    def get_referral_links_list(bot_username: str, referral_links: list[ReferralLink]) -> str:
        text = 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ \n\n' \
               '<b>–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:</b> \n\n'

        for n, link in enumerate(referral_links, start=1):
            text += (
                f'{n} ‚Äî <code>{link.name}</code> \n'
                f'üîó <code>https://t.me/{bot_username}?start={link.name}</code> \n'
                f'üìä –ö–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {link.user_count} \n'
                # f'üì≤ –ù–∞ –û–ü –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {link.passed_op_count} \n'
            )
            text += '-' * 30 + '\n'
        return text

