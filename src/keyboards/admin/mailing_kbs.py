from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, \
    InlineKeyboardBuilder

from .admin_keyboards import AdminKeyboardBase


class MailingKb(AdminKeyboardBase):
    @staticmethod
    def get_button_for_admin_menu():
        return KeyboardButton(text='‚úâ –†–∞—Å—Å—ã–ª–∫–∞ ‚úâ')

    @staticmethod
    def get_skip_adding_button_to_post() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏', callback_data='continue_wout_button')
        return builder.as_markup()

    @staticmethod
    def get_cancel_button() -> InlineKeyboardButton:
        return InlineKeyboardButton(text='üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_mailing')

    @staticmethod
    def get_cancel_markup() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[[MailingKb.get_cancel_button()]])

    @staticmethod
    def get_confirm_mailing() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùó –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚ùó', callback_data='start_mailing')
        builder.add(MailingKb.get_cancel_button())
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def generate_markup_from_text(text: str) -> InlineKeyboardMarkup:
        markup_builder = InlineKeyboardBuilder()

        lines = text.split('\n')  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        for line in lines:  # –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            button_contents = line.strip().split('|')  # —Ä–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            row_builder = InlineKeyboardBuilder()

            for content in button_contents:
                item_parts = content.strip().split()
                text = ' '.join(item_parts[:-1])
                url = item_parts[-1]
                if text and url:
                    row_builder.button(text=text, url=url)

            row_builder.adjust(len(button_contents))
            markup_builder.attach(row_builder)

        return markup_builder.as_markup()
